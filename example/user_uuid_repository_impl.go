// Code generated by "repository -type=UserRepository,UserUuidRepository"; DO NOT EDIT.
package example

import (
	"context"
	"database/sql"

	"github.com/jmoiron/sqlx"
)

type userUuidRepositoryImpl struct {
	db sqlx.ExtContext
}

func NewUserUuidRepository(db sqlx.ExtContext) UserUuidRepository {
	return &userUuidRepositoryImpl{db: db}
}

func (r *userUuidRepositoryImpl) Count(ctx context.Context) (int64, error) {
	var cnt int64
	err := r.db.QueryRowxContext(ctx, "SELECT COUNT(`id`) FROM `user_uuid`").Scan(&cnt)
	if err != nil {
		return 0, err
	}
	return cnt, nil
}

func (r *userUuidRepositoryImpl) Create(ctx context.Context, model *UserUuid) (*UserUuid, error) {
	_, err := r.db.ExecContext(ctx, "INSERT INTO `user_uuid` (`id`, `name`, `birthday`, `created_at`, `updated_at`) VALUES (?, ?, ?, ?, ?)", model.Id, model.Name, model.Birthday, model.CreatedAt, model.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return r.FindById(ctx, model.Id)
}

func (r *userUuidRepositoryImpl) DeleteById(ctx context.Context, id ID) error {
	_, err := r.db.ExecContext(ctx, "DELETE FROM `user_uuid` WHERE `id` = ?", id)
	if err != nil {
		return err
	}
	return nil
}

func (r *userUuidRepositoryImpl) ExistsById(ctx context.Context, id ID) (bool, error) {
	var cnt int64
	err := r.db.QueryRowxContext(ctx, "SELECT COUNT(`id`) FROM `user_uuid` WHERE `id` = ?", id).Scan(&cnt)
	if err != nil {
		return false, err
	}
	return cnt > 0, nil
}

func (r *userUuidRepositoryImpl) FindAll(ctx context.Context) ([]*UserUuid, error) {
	var m []*UserUuid
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user_uuid`")
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userUuidRepositoryImpl) FindById(ctx context.Context, id ID) (*UserUuid, error) {
	var m UserUuid
	err := r.db.QueryRowxContext(ctx, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user_uuid` WHERE `id` = ?", id).StructScan(&m)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &m, nil
}

func (r *userUuidRepositoryImpl) Update(ctx context.Context, model *UserUuid) error {
	_, err := r.db.ExecContext(ctx, "UPDATE `user_uuid` SET `name` = ?, `birthday` = ?, `created_at` = ?, `updated_at` = ? WHERE `id` = ?", model.Name, model.Birthday, model.CreatedAt, model.UpdatedAt, model.Id)
	if err != nil {
		return err
	}

	return nil
}

func (r *userUuidRepositoryImpl) FindByName(ctx context.Context, name string) (*UserUuid, error) {
	var m UserUuid
	err := r.db.QueryRowxContext(ctx, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user_uuid` WHERE `name` = ?", name).StructScan(&m)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &m, nil
}
