// Code generated by "repository -type=UserRepository,UserUuidRepository"; DO NOT EDIT.
package example

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/jmoiron/sqlx"
	"github.com/lkebin/repository/filter"
	"github.com/lkebin/repository/pager"
)

type userRepositoryImpl struct {
	db sqlx.ExtContext
}

func NewUserRepository(db sqlx.ExtContext) UserRepository {
	return &userRepositoryImpl{db: db}
}

func (r *userRepositoryImpl) Count(ctx context.Context) (int64, error) {
	var cnt int64
	err := r.db.QueryRowxContext(ctx, "SELECT COUNT(`id`) FROM `user`").Scan(&cnt)
	if err != nil {
		return 0, err
	}
	return cnt, nil
}

func (r *userRepositoryImpl) Create(ctx context.Context, model *User) (*User, error) {
	result, err := r.db.ExecContext(ctx, "INSERT INTO `user` (`name`, `birthday`, `updated_at`) VALUES (?, ?, ?)", model.Name, model.Birthday, model.UpdatedAt)
	if err != nil {
		return nil, err
	}

	id, err := result.LastInsertId()
	if err != nil {
		return nil, err
	}
	return r.FindById(ctx, id)
}

func (r *userRepositoryImpl) DeleteById(ctx context.Context, id int64) error {
	_, err := r.db.ExecContext(ctx, "DELETE FROM `user` WHERE `id` = ?", id)
	if err != nil {
		return err
	}
	return nil
}

func (r *userRepositoryImpl) ExistsById(ctx context.Context, id int64) (bool, error) {
	var cnt int64
	err := r.db.QueryRowxContext(ctx, "SELECT COUNT(`id`) FROM `user` WHERE `id` = ?", id).Scan(&cnt)
	if err != nil {
		return false, err
	}
	return cnt > 0, nil
}

func (r *userRepositoryImpl) FindAll(ctx context.Context) ([]*User, error) {
	var m []*User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user`")
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindById(ctx context.Context, id int64) (*User, error) {
	var m User
	err := r.db.QueryRowxContext(ctx, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `id` = ?", id).StructScan(&m)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &m, nil
}

func (r *userRepositoryImpl) Update(ctx context.Context, model *User) error {
	_, err := r.db.ExecContext(ctx, "UPDATE `user` SET `name` = ?, `birthday` = ?, `updated_at` = ? WHERE `id` = ?", model.Name, model.Birthday, model.UpdatedAt, model.Id)
	if err != nil {
		return err
	}

	return nil
}

func (r *userRepositoryImpl) Query(ctx context.Context, size int64, p pager.OffsetPager, f filter.Filter) ([]*User, int64, error) {
	var (
		m        []*User
		total    int64
		countSQL = "SELECT COUNT(`id`) FROM `user`WHERE %s"
		dataSQL  = "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user`WHERE %s ORDER BY %s LIMIT ? OFFSET ?"
	)

	filterWhere, filterValues, err := f.Build()
	if err != nil {
		return nil, total, fmt.Errorf("build filter error: %w", err)
	}

	if err := r.db.QueryRowxContext(ctx, fmt.Sprintf(countSQL, filterWhere), filterValues...).Scan(&total); err != nil {
		if err == sql.ErrNoRows {
			return nil, 0, nil
		}
		return nil, total, fmt.Errorf("count query error: %w", err)
	}

	if total == 0 {
		return nil, total, nil
	}

	orderBy, pageNum, err := p.Build()
	if err != nil {
		return nil, total, fmt.Errorf("build pager error: %w", err)
	}

	bind := []interface{}{}
	bind = append(bind, filterValues...)
	bind = append(bind, size)
	bind = append(bind, (pageNum-1)*size)

	if err := sqlx.SelectContext(ctx, r.db, &m, fmt.Sprintf(dataSQL, filterWhere, orderBy), bind...); err != nil {
		return nil, total, fmt.Errorf("query list error: %w", err)
	}

	return m, total, nil
}

func (r *userRepositoryImpl) FindByName(ctx context.Context, name string) (*User, error) {
	var m User
	err := r.db.QueryRowxContext(ctx, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `name` = ?", name).StructScan(&m)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &m, nil
}

func (r *userRepositoryImpl) FindByNameAndBirthdayIn(ctx context.Context, name string, birthday []string) ([]*User, error) {
	var m []*User
	query, args, err := sqlx.In("SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE (`name` = ?) AND (`birthday` IN (?))", name, birthday)
	if err != nil {
		return nil, err
	}
	query = r.db.Rebind(query)
	err = sqlx.SelectContext(ctx, r.db, &m, query, args...)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByNameAndBirthday(ctx context.Context, name string, birthday string) ([]*User, error) {
	var m []*User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE (`name` = ?) AND (`birthday` = ?)", name, birthday)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayBetween(ctx context.Context, start string, end string) ([]*User, error) {
	var m []*User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` BETWEEN ? AND ?", start, end)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayIsBefore(ctx context.Context, date string) ([]*User, error) {
	var m []*User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` < ?", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayOrderByNameAsc(ctx context.Context, date string) ([]*User, error) {
	var m []*User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` = ? ORDER BY name ASC", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayOrderByNameAscBirthdayDesc(ctx context.Context, date string) ([]*User, error) {
	var m []*User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` = ? ORDER BY name ASC, birthday DESC", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindTop20ByBirthday(ctx context.Context, date string) ([]*User, error) {
	var m []*User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` = ? LIMIT 20", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}
