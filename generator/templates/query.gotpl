func (r {{ .Receiver }}) Query({{ Params .Params .Repository }}) {{ Results .Results .Repository }} {
	var (
        m     {{ ResultModel .Results .Repository }}
		total int64
		countSQL = "{{- CountClause .Model -}} {{- FromClause .TableName -}} WHERE %s"
		dataSQL = "{{- SelectClause .Model false -}} {{- FromClause .TableName -}} WHERE %s ORDER BY %s LIMIT ? OFFSET ?"
	)

	filterWhere, filterValues, err := f.Build()
	if err != nil {
		return nil, total, fmt.Errorf("build filter error: %w", err)
	}

	if err := r.db.QueryRowxContext({{ CtxParam .Params }}, fmt.Sprintf(countSQL, filterWhere), filterValues...).Scan(&total); err != nil {
		if err == sql.ErrNoRows {
			return nil, 0, nil
		}
		return nil, total, fmt.Errorf("count query error: %w", err)
	}

	if total == 0 {
		return nil, total, nil
	}

	orderBy, pageNum, err := p.Build()
	if err != nil {
		return nil, total, fmt.Errorf("build pager error: %w", err)
	}

	bind := []interface{}{}
	bind = append(bind, filterValues...)
	bind = append(bind, size)
	bind = append(bind, (pageNum-1)*size)

	if err := sqlx.SelectContext(ctx, r.db, &m, fmt.Sprintf(dataSQL, filterWhere, orderBy), bind...); err != nil {
		return nil, total, fmt.Errorf("query list error: %w", err)
	}

	return m, total, nil
}
