// Code generated by `repository -type=UserRepository,UserUuidRepository`, DO NOT EDIT.
package testdata

import (
	"context"
	"database/sql"
	"github.com/jmoiron/sqlx"
	"github.com/lkebin/repository/testdata"
)

type userRepositoryImpl struct {
	db sqlx.ExtContext
}

func NewUserRepository(db sqlx.ExtContext) UserRepository {
	return &userRepositoryImpl{db: db}
}

func (r *userRepositoryImpl) Create(ctx context.Context, model *testdata.User) (*testdata.User, error) {
	result, err := r.db.ExecContext(ctx, "INSERT INTO `user` (`name`, `birthday`, `updated_at`) VALUES (?, ?, ?)", model.Name, model.Birthday, model.UpdatedAt)
	if err != nil {
		return nil, err
	}

	id, err := result.LastInsertId()
	if err != nil {
		return nil, err
	}
	return r.Find(ctx, id)
}

func (r *userRepositoryImpl) Delete(ctx context.Context, id int64) error {
	_, err := r.db.ExecContext(ctx, "DELETE FROM `user` WHERE `id` = ?", id)
	if err != nil {
		return err
	}
	return nil
}

func (r *userRepositoryImpl) Find(ctx context.Context, id int64) (*testdata.User, error) {
	var m testdata.User
	err := r.db.QueryRowxContext(ctx, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `id` = ?", id).StructScan(&m)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &m, nil
}

func (r *userRepositoryImpl) Update(ctx context.Context, model *testdata.User) error {
	_, err := r.db.ExecContext(ctx, "UPDATE `user` SET `name` = ?, `birthday` = ?, `updated_at` = ?  WHERE `id` = ?", model.Name, model.Birthday, model.UpdatedAt, model.Id)
	if err != nil {
		return nil, err
	}

	return nil
}

func (r *userRepositoryImpl) FindByName(ctx context.Context, name string) (*testdata.User, error) {
	var m testdata.User
	err := r.db.QueryRowxContext(ctx, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `name` = ?", name).StructScan(&m)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}
	return &m, nil
}

func (r *userRepositoryImpl) FindByNameAndBirthdayIn(ctx context.Context, name string, birthday []string) ([]*testdata.User, error) {
	var m []*testdata.User
	query, args, err := sqlx.In("SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE (`name` = ?) AND (`birthday` IN (?))", name, birthday)
	if err != nil {
		return nil, err
	}
	query = r.db.Rebind(query)
	err = r.db.SelectContext(ctx, &m, query, args...)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByNameAndBirthday(ctx context.Context, name string, birthday string) ([]*testdata.User, error) {
	var m []*testdata.User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE (`name` = ?) AND (`birthday` = ?)", name, birthday)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayBetween(ctx context.Context, start string, end string) ([]*testdata.User, error) {
	var m []*testdata.User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` BETWEEN ? AND ?", start, end)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayIsBefore(ctx context.Context, date string) ([]*testdata.User, error) {
	var m []*testdata.User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` < ?", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayOrderByNameAsc(ctx context.Context, date string) ([]*testdata.User, error) {
	var m []*testdata.User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` = ? ORDER BY name ASC", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindByBirthdayOrderByNameAscBirthdayDesc(ctx context.Context, date string) ([]*testdata.User, error) {
	var m []*testdata.User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` = ? ORDER BY name ASC, birthday DESC", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (r *userRepositoryImpl) FindTop20ByBirthday(ctx context.Context, date string) ([]*testdata.User, error) {
	var m []*testdata.User
	err := sqlx.SelectContext(ctx, r.db, &m, "SELECT `id`, `name`, `birthday`, `created_at`, `updated_at` FROM `user` WHERE `birthday` = ? LIMIT 20", date)
	if err != nil {
		return nil, err
	}
	return m, nil
}
